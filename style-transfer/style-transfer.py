# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TZ9_nXbZFnJb7O1Vgl9X8Til3hhANixM
"""

from __future__ import print_function

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim

from PIL import Image
import cv2
#from google.colab.patches import cv2_imshow
import matplotlib.pyplot as plt

import torchvision.transforms as transforms
import torchvision.models as models

import os
import copy

# Commented out IPython magic to ensure Python compatibility.
# Mount Google Drive to notebook
#from google.colab import drive
#drive.mount('/content/drive/')
# %cd /content/drive/My Drive/cs194_final

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

loader = transforms.Compose([transforms.Resize(512), transforms.ToTensor()])

# Read image from drive
def read_image(filename):
    image = Image.open(filename)
    image = loader(image)
    image = image.unsqueeze(0)
    return image.to(device, torch.float)

def save_img(tensor, filename):
  image = convert_img(tensor)
  image.save(f'./output/{filename}.jpg')

def convert_img(tensor):
  image = tensor.cpu().clone()
  image = image.squeeze(0)
  image = transforms.ToPILImage()(image)
  return image

def imshow(tensor):
    image = convert_img(tensor)
    plt.figure()
    plt.imshow(image)

# Create gram matrix from feature map
def get_gram_matrix(feature_map):
    a, b, c, d = feature_map.size()
    feature_map_hat = feature_map.reshape(a * b, c * d) 
    G = torch.mm(feature_map_hat, feature_map_hat.t()) 

    num_elem = a * b * c * d
    return G / num_elem

# Calculates the current content loss
class ContentLayer(nn.Module):
    def __init__(self, target_map):
        super(ContentLayer, self).__init__()
        self.content = target_map.detach()

    def forward(self, feature_map):
        self.loss = F.mse_loss(feature_map, self.content)
        return feature_map

# Calculates the current style loss
class StyleLayer(nn.Module):
    def __init__(self, target_map):
        super(StyleLayer, self).__init__()
        self.style = get_gram_matrix(target_map).detach()

    def forward(self, feature_map):
        G = get_gram_matrix(feature_map)
        self.loss = F.mse_loss(G, self.style)
        return feature_map

cnn_mean = torch.tensor([0.485, 0.456, 0.406]).to(device)
cnn_std = torch.tensor([0.229, 0.224, 0.225]).to(device)

class Normalization(nn.Module):
    def __init__(self, mean=cnn_mean, std=cnn_std):
        super(Normalization, self).__init__()
        self.mean = torch.tensor(mean).view(-1, 1, 1)
        self.std = torch.tensor(std).view(-1, 1, 1)

    def forward(self, img):
        return (img - self.mean) / self.std

# Import the pretrained VGG model
model = models.vgg19(pretrained=True).features.to(device).eval()

# Define the indexes to add Style and Content Layers
style_idxs = [4]
content_idxs = list(range(5))
max_idx = max(list(set(style_idxs) & set(content_idxs)))

# Add a style or content layer and return the lose
def add_layer(model, im, layer_type, conv_idx):
  feature_map = model(im).detach()
  if layer_type == 'Content':
      loss = ContentLayer(feature_map)
  elif layer_type == 'Style':
      loss = StyleLayer(feature_map)
  model.add_module(f'{layer_type}_{conv_idx}', loss)
  return loss

# Get the model with new loss layers
def get_model(cnn, content_im, style_im):
    
    normalization = Normalization().to(device)
    model = nn.Sequential(normalization)

    content_losses = []
    style_losses = []

    conv_idx = 0
    for name, layer in cnn.named_modules():
        if isinstance(layer, nn.Sequential):
            continue
        elif isinstance(layer, nn.ReLU):
            layer = nn.ReLU(inplace=False)

        # Add the existing layers back to model
        model.add_module(name, layer)

        # Add the Content and Style layers after Conv layer
        if isinstance(layer, nn.Conv2d):
            conv_idx += 1
            if conv_idx in content_idxs:
                content_loss = add_layer(model, content_im, 'Content', conv_idx)
                content_losses.append(content_loss)
            if conv_idx in style_idxs:
                style_loss = add_layer(model, style_im, 'Style', conv_idx)
                style_losses.append(style_loss)
        
        # Break once the last Content/Style layer is added
        if conv_idx == max_idx:
          break

    return model, style_losses, content_losses

def train(pretrained_model, content_im, style_im, epochs=300, s_w=2000000, c_w=1):
    # Get model with content and style layers
    model, style_losses, content_losses = get_model(pretrained_model, content_im, style_im)

    # Intialize input to random image
    input_img = torch.randn(content_im.data.size(), device=device)

    # Only calculate gradients for image
    input_img.requires_grad_(True)
    model.requires_grad_(False)

    optimizer = optim.LBFGS([input_img])

    steps = [0]
    while steps[0] <= epochs:

        def closure():
            with torch.no_grad():
                input_img.clamp_(0, 1)

            optimizer.zero_grad()
            model(input_img)
            style_score, content_score = 0, 0

            for sl in style_losses:
                style_score += sl.loss
            for cl in content_losses:
                content_score += cl.loss

            style_score *= s_w
            content_score *= c_w

            loss = style_score + content_score
            loss.backward()

            steps[0] += 1
            if steps[0] % 50 == 0:
                print("run {}:".format(steps))
                print('Style Loss : {:4f} Content Loss: {:4f}'.format(
                    style_score.item(), content_score.item()))

            return style_score + content_score

        optimizer.step(closure)

    with torch.no_grad():
        input_img.clamp_(0, 1)

    return input_img


def main():
    # Read in style and content images
    style_img = read_image('./style/obama_art.jpg')
    content_img = read_image('./content/joe.jpeg')

    style_transfer_img = train(model, content_img, style_img)

    imshow(style_transfer_img)

    #save_img(style_transfer_img, 'joe')



# driver function
if __name__=="__main__":
    main()



